{
  "version": 3,
  "sources": ["../../src/lit/input.ts"],
  "sourcesContent": ["import { LitElement, html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport { Validation } from '../types';\n\n@customElement('lit-input')\nexport class LitInput extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      container-type: inline-size;\n      position: relative;\n      width: 100%;\n    }\n    \n    label {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n    }\n\n    strong {\n      margin-bottom: 0.5rem;\n      font-size: 2rem;\n    }\n\n    div {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    input {\n      flex: 1;\n      outline: none;\n      box-sizing: border-box;\n      height: 3.5rem;\n      padding: 0.5rem 1rem;\n      background-color: #fff;\n      border: 2px solid #ccc;\n      border-radius: 0.25rem 0 0 0.25rem;\n      font-size: 1.5rem;\n    }\n\n    em {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n      font-style: normal;\n      width: 3.5rem;\n      height: 3.5rem;\n      background-color: #ccc;\n      border-radius: 0 0.25rem 0.25rem 0;\n      text-shadow: 0px 0px 2px #fff;\n      font-size: 2.5rem;\n    }\n\n    .error input {\n      border-color: var(--color-danger);\n    }\n\n    .error em {\n      background-color: var(--color-danger);\n    }\n\n    .success input {\n      border-color: var(--color-success);\n    }\n\n    .success em {\n      background-color: var(--color-success);\n    }\n  `;\n\n  @property({ type: String }) readonly label = 'Label';\n  @property({ type: String }) readonly placeholder?: string;\n  @property({ type: Array }) readonly validations?: Validation[];\n  @state() private messageType?: string;\n  @state() private messageText?: string;\n\n  private onChanged(e: Event) {\n    if (!this.validations) return;\n    const value = (e?.target as HTMLInputElement)?.value;\n    // validate\n    let validationResult: undefined | Pick<Validation, 'type' | 'message'>;\n    for (let i = 0; i < this.validations.length; i++) {\n      const { equals, type, message } = this.validations[i];\n      const isMatched = value.toLowerCase() === equals.toLowerCase();\n      this.messageType = isMatched ? type : undefined;\n      this.messageText = isMatched ? message : undefined;\n      if (isMatched) {\n        validationResult = { type, message };\n        break;\n      }\n    }\n    // result\n    const detail = [{ value, ...validationResult }];\n    this.dispatchEvent(new CustomEvent('change', { detail }));\n  }\n\n  protected render() {\n    return html`\n      <label part=\"input\" class=${this.messageType as string}>\n        <strong>${this.label}</strong>\n        <div>\n          <input\n            type=\"text\"\n            .placeholder=${this.placeholder || ''}\n            @input=${this.onChanged}\n          />\n          <em>${this.messageText || ''}</em>\n        </div>\n      </label>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'lit-input': LitInput;\n  }\n}\n"],
  "mappings": "wMAAA,OAAS,cAAAA,EAAY,QAAAC,EAAM,OAAAC,MAAW,MACtC,OAAS,iBAAAC,EAAe,YAAAC,EAAU,SAAAC,MAAa,oBAKxC,IAAMC,EAAN,cAAuBC,CAAW,CAAlC,kCAqEuB,KAAS,MAAQ,QAMrC,UAAUC,EAAU,CAC1B,GAAI,CAAC,KAAK,YAAa,OACvB,MAAMC,EAASD,GAAG,QAA6B,MAE/C,IAAIE,EACJ,QAASC,EAAI,EAAGA,EAAI,KAAK,YAAY,OAAQA,IAAK,CAChD,KAAM,CAAE,OAAAC,EAAQ,KAAAC,EAAM,QAAAC,CAAQ,EAAI,KAAK,YAAYH,CAAC,EAC9CI,EAAYN,EAAM,YAAY,IAAMG,EAAO,YAAY,EAG7D,GAFA,KAAK,YAAcG,EAAYF,EAAO,OACtC,KAAK,YAAcE,EAAYD,EAAU,OACrCC,EAAW,CACbL,EAAmB,CAAE,KAAAG,EAAM,QAAAC,CAAQ,EACnC,KACF,CACF,CAEA,MAAME,EAAS,CAAC,CAAE,MAAAP,EAAO,GAAGC,CAAiB,CAAC,EAC9C,KAAK,cAAc,IAAI,YAAY,SAAU,CAAE,OAAAM,CAAO,CAAC,CAAC,CAC1D,CAEU,QAAS,CACjB,OAAOC;AAAA,kCACuB,KAAK,WAAqB;AAAA,kBAC1C,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,2BAID,KAAK,aAAe,EAAE;AAAA,qBAC5B,KAAK,SAAS;AAAA;AAAA,gBAEnB,KAAK,aAAe,EAAE;AAAA;AAAA;AAAA,KAIpC,CACF,EA9GaX,EACJ,OAASY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoEqBC,EAAA,CAApCC,EAAS,CAAE,KAAM,MAAO,CAAC,GArEfd,EAqE0B,qBACAa,EAAA,CAApCC,EAAS,CAAE,KAAM,MAAO,CAAC,GAtEfd,EAsE0B,2BACDa,EAAA,CAAnCC,EAAS,CAAE,KAAM,KAAM,CAAC,GAvEdd,EAuEyB,2BACnBa,EAAA,CAAhBE,EAAM,GAxEIf,EAwEM,2BACAa,EAAA,CAAhBE,EAAM,GAzEIf,EAyEM,2BAzENA,EAANa,EAAA,CADNG,EAAc,WAAW,GACbhB",
  "names": ["LitElement", "html", "css", "customElement", "property", "state", "LitInput", "LitElement", "e", "value", "validationResult", "i", "equals", "type", "message", "isMatched", "detail", "html", "css", "__decorateClass", "property", "state", "customElement"]
}
