{"mappings":"A,C,KCGA,IAAM,EAAQ,IAAI,cAClB,EAAM,WAAA,CAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEnB,CAAC,EAGD,IAAM,EAAW,SAAS,aAAA,CAAc,WACxC,CAAA,EAAS,SAAA,CAAY,CAAC;;;;;;;;AAQtB,CAAC,AAGM,OAAM,UAAoB,YAC/B,WAAW,oBAAqB,CAC9B,MAAO,CAAC,QAAS,cAAe,cAAc,AAChD,CAGA,IAAI,OAAQ,CAAE,OAAO,IAAI,CAAC,MAAZ,AAAmB,CACjC,IAAI,MAAM,CAAyB,CAAE,CAAE,IAAI,CAAC,WAAA,CAAY,EAAO,CAAA,EAAM,CAGrE,IAAI,aAAc,CAAE,OAAO,IAAI,CAAC,YAAZ,AAAyB,CAC7C,IAAI,YAAY,CAAyB,CAAE,CAAE,IAAI,CAAC,iBAAA,CAAkB,EAAO,CAAA,EAAM,CAGjF,IAAI,aAAc,CAAE,OAAO,IAAI,CAAC,YAAZ,AAAyB,CAC7C,IAAI,YAAY,CAA+B,CAAE,CAAE,IAAI,CAAC,iBAAA,CAAkB,EAAO,CAOjF,aAAc,CACZ,KAAK,GANC,IAAA,CAAA,aAAA,CAAyC,KACzC,IAAA,CAAA,SAAA,CAAgC,KAChC,IAAA,CAAA,SAAA,CAAqC,KACrC,IAAA,CAAA,WAAA,CAAkC,KA6ElC,IAAA,CAAA,SAAA,CAAY,AAAC,QAIf,EAHJ,GAAI,CAAC,IAAI,CAAC,WAAA,EAAe,CAAC,IAAI,CAAC,aAAA,EAAiB,CAAC,IAAI,CAAC,SAAA,EAAa,CAAC,IAAI,CAAC,WAAA,CAAa,OACtF,IAAM,EAAS,GAAG,QAA6B,MAG/C,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,WAAA,CAAY,MAAA,CAAQ,IAAK,CAChD,GAAM,CAAA,OAAE,CAAM,CAAA,KAAE,CAAI,CAAA,QAAE,CAAO,CAAE,CAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAC/C,EAAY,EAAM,WAAA,KAAkB,EAAO,WAAjD,GAGA,GAFA,IAAI,CAAC,WAAA,CAAY,WAAA,CAAc,AAAC,EAAiB,EAAL,GAC5C,IAAI,CAAC,aAAA,EAAe,SAAS,CAAC,AAAC,EAAuB,MAAX,SAAiB,CAAC,GACzD,EAAW,CACb,EAAmB,CAAE,KAAA,EAAM,QAAA,CAAQ,EACnC,KACF,CACF,CAEA,IAAM,EAAS,CAAC,CAAE,MAAA,EAAO,GAAG,CAAgB,AAAC,EAAE,CAC/C,IAAI,CAAC,aAAA,CAAc,IAAI,YAAY,SAAU,CAAE,OAAA,CAAO,GACxD,EA3FE,IAAI,CAAC,YAAA,CAAa,CAAE,KAAM,MAAO,GAC7B,IAAI,CAAC,UAAA,GAEP,IAAI,CAAC,UAAA,CAAW,WAAA,CAAY,EAAS,OAAA,CAAQ,SAAA,CAAU,CAAA,IACvD,IAAI,CAAC,UAAA,CAAW,kBAAA,CAAqB,CAAC,EAAM,CAE5C,IAAI,CAAC,aAAA,CAAgB,IAAI,CAAC,UAAA,CAAW,aAAA,CAAc,SACnD,IAAI,CAAC,SAAA,CAAY,IAAI,CAAC,UAAA,CAAW,aAAA,CAAc,UAC/C,IAAI,CAAC,SAAA,CAAY,IAAI,CAAC,UAAA,CAAW,aAAA,CAAc,SAC/C,IAAI,CAAC,WAAA,CAAc,IAAI,CAAC,UAAA,CAAW,aAAA,CAAc,MAErD,CAEQ,YAAY,CAAc,CAAE,EAAU,CAAA,CAAK,CAAE,CACnD,IAAI,CAAC,MAAA,CAAS,GAAS,QACnB,GACF,IAAI,CAAC,YAAA,CAAa,QAAS,IAAI,CAAC,MADlC,EAGI,IAAI,CAAC,SAAA,EACP,CAAA,IAAI,CAAC,SAAA,CAAU,WAAA,CAAc,IAAI,CAAC,MADpC,AAAA,CAGF,CAEQ,kBAAkB,CAAc,CAAE,EAAU,CAAA,CAAK,CAAE,CACzD,IAAI,CAAC,YAAA,CAAe,EAChB,GACF,IAAI,CAAC,YAAA,CAAa,cAAe,IAAI,CAAC,YADxC,EAGI,IAAI,CAAC,SAAA,EACP,IAAI,CAAC,SAAA,CAAU,YAAA,CAAa,cAAe,IAAI,CAAC,YADlD,CAGF,CAEQ,kBAAkB,CAAuB,CAAE,CACjD,IAAI,CAAC,YAAA,CAAe,AAAiB,UAAjB,OAAO,EAAqB,KAAK,KAAA,CAAM,GAAS,CACtE,CAEA,mBAAoB,CAElB,IAAM,EAAe,IAAI,CAAC,YAAA,CAAa,SACnC,GAAgB,IAAiB,IAAI,CAAC,MAAA,EACxC,IAAI,CAAC,WAAA,CAAY,GAEnB,IAAM,EAAqB,IAAI,CAAC,YAAA,CAAa,eACzC,GAAsB,IAAuB,IAAI,CAAC,YAAA,EACpD,IAAI,CAAC,iBAAA,CAAkB,GAEzB,IAAM,EAAqB,IAAI,CAAC,YAAA,CAAa,eACzC,GACF,IAAI,CAAC,iBAAA,CAAkB,GAGrB,IAAI,CAAC,SAAA,EACP,IAAI,CAAC,SAAA,CAAU,gBAAA,CAAiB,QAAS,IAAI,CAAC,SADhD,CAGF,CAEA,yBAAyB,CAAY,CAAE,CAAgB,CAAE,CAAgB,CAAE,CACrE,AAAS,UAAT,GAAoB,IAAa,IAAI,CAAC,MAAA,CACxC,IAAI,CAAC,WAAA,CAAY,GACR,AAAS,gBAAT,GAA0B,IAAa,IAAI,CAAC,YAAA,CACrD,IAAI,CAAC,iBAAA,CAAkB,GACL,gBAAT,GACT,IAAI,CAAC,iBAAA,CAAkB,EAE3B,CAEA,sBAAuB,CACjB,IAAI,CAAC,SAAA,EACP,IAAI,CAAC,SAAA,CAAU,mBAAA,CAAoB,QAAS,IAAI,CAAC,SADnD,CAGF,CAsBF,CAEA,eAAe,MAAA,CAAO,eAAgB,E,C","sources":["<anon>","src/native/input.ts"],"sourcesContent":["(() => {\n// <style>\nconst $68bff44cd1c3e89d$var$style = new CSSStyleSheet();\n$68bff44cd1c3e89d$var$style.replaceSync(`\n  :host {\n    display: block;\n    container-type: inline-size;\n    position: relative;\n    width: 100%;\n  }\n  \n  label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  strong {\n    margin-bottom: 0.5rem;\n    font-size: 2rem;\n  }\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  input {\n    flex: 1;\n    outline: none;\n    box-sizing: border-box;\n    height: 3.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #fff;\n    border: 2px solid #ccc;\n    border-radius: 0.25rem 0 0 0.25rem;\n    font-size: 1.5rem;\n  }\n\n  em {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    font-style: normal;\n    width: 3.5rem;\n    height: 3.5rem;\n    background-color: #ccc;\n    border-radius: 0 0.25rem 0.25rem 0;\n    text-shadow: 0px 0px 2px #fff;\n    font-size: 2.5rem;\n  }\n\n  .error input {\n    border-color: var(--color-danger);\n  }\n\n  .error em {\n    background-color: var(--color-danger);\n  }\n\n  .success input {\n    border-color: var(--color-success);\n  }\n\n  .success em {\n    background-color: var(--color-success);\n  }\n`);\n// <template>\nconst $68bff44cd1c3e89d$var$template = document.createElement(\"template\");\n$68bff44cd1c3e89d$var$template.innerHTML = `\n  <label part=\"input\">\n    <strong></strong>\n    <div>\n      <input type=\"text\" />\n      <em></em>\n    </div>\n  </label>\n`;\nclass $68bff44cd1c3e89d$export$7349d22023f097e4 extends HTMLElement {\n    static get observedAttributes() {\n        return [\n            \"label\",\n            \"placeholder\",\n            \"validations\"\n        ];\n    }\n    get label() {\n        return this._label;\n    }\n    set label(value) {\n        this.changeLabel(value, true);\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this.changePlaceholder(value, true);\n    }\n    get validations() {\n        return this._validations;\n    }\n    set validations(value) {\n        this.changeValidations(value);\n    }\n    constructor(){\n        super();\n        this.containerNode = null;\n        this.labelNode = null;\n        this.inputNode = null;\n        this.messageNode = null;\n        this.onInputed = (e)=>{\n            if (!this.validations || !this.containerNode || !this.inputNode || !this.messageNode) return;\n            const value = (e?.target)?.value;\n            // validate\n            let validationResult;\n            for(let i = 0; i < this.validations.length; i++){\n                const { equals: equals, type: type, message: message } = this.validations[i];\n                const isMatched = value.toLowerCase() === equals.toLowerCase();\n                this.messageNode.textContent = !isMatched ? \"\" : message;\n                this.containerNode?.classList[!isMatched ? \"remove\" : \"add\"](type);\n                if (isMatched) {\n                    validationResult = {\n                        type: type,\n                        message: message\n                    };\n                    break;\n                }\n            }\n            // result\n            const detail = [\n                {\n                    value: value,\n                    ...validationResult\n                }\n            ];\n            this.dispatchEvent(new CustomEvent(\"change\", {\n                detail: detail\n            }));\n        };\n        this.attachShadow({\n            mode: \"open\"\n        });\n        if (this.shadowRoot) {\n            // set template/style\n            this.shadowRoot.appendChild($68bff44cd1c3e89d$var$template.content.cloneNode(true));\n            this.shadowRoot.adoptedStyleSheets = [\n                $68bff44cd1c3e89d$var$style\n            ];\n            // children refs\n            this.containerNode = this.shadowRoot.querySelector(\"label\");\n            this.labelNode = this.shadowRoot.querySelector(\"strong\");\n            this.inputNode = this.shadowRoot.querySelector(\"input\");\n            this.messageNode = this.shadowRoot.querySelector(\"em\");\n        }\n    }\n    changeLabel(value, reflect = false) {\n        this._label = value || \"Label\";\n        if (reflect) this.setAttribute(\"label\", this._label);\n        if (this.labelNode) this.labelNode.textContent = this._label;\n    }\n    changePlaceholder(value, reflect = false) {\n        this._placeholder = value;\n        if (reflect) this.setAttribute(\"placeholder\", this._placeholder);\n        if (this.inputNode) this.inputNode.setAttribute(\"placeholder\", this._placeholder);\n    }\n    changeValidations(value) {\n        this._validations = typeof value === \"string\" ? JSON.parse(value) : value;\n    }\n    connectedCallback() {\n        // initial attribute values\n        const initialLabel = this.getAttribute(\"label\");\n        if (initialLabel && initialLabel !== this._label) this.changeLabel(initialLabel);\n        const initialPlaceholder = this.getAttribute(\"placeholder\");\n        if (initialPlaceholder && initialPlaceholder !== this._placeholder) this.changePlaceholder(initialPlaceholder);\n        const initialValidations = this.getAttribute(\"validations\");\n        if (initialValidations) this.changeValidations(initialValidations);\n        // events\n        if (this.inputNode) this.inputNode.addEventListener(\"input\", this.onInputed);\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"label\" && newValue !== this._label) this.changeLabel(newValue);\n        else if (name === \"placeholder\" && newValue !== this._placeholder) this.changePlaceholder(newValue);\n        else if (name === \"validations\") this.changeValidations(newValue);\n    }\n    disconnectedCallback() {\n        if (this.inputNode) this.inputNode.removeEventListener(\"input\", this.onInputed);\n    }\n}\ncustomElements.define(\"native-input\", $68bff44cd1c3e89d$export$7349d22023f097e4);\n\n})();\n//# sourceMappingURL=input.js.map\n","import { Validation } from '../types';\n\n// <style>\nconst style = new CSSStyleSheet();\nstyle.replaceSync(`\n  :host {\n    display: block;\n    container-type: inline-size;\n    position: relative;\n    width: 100%;\n  }\n  \n  label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  strong {\n    margin-bottom: 0.5rem;\n    font-size: 2rem;\n  }\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  input {\n    flex: 1;\n    outline: none;\n    box-sizing: border-box;\n    height: 3.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #fff;\n    border: 2px solid #ccc;\n    border-radius: 0.25rem 0 0 0.25rem;\n    font-size: 1.5rem;\n  }\n\n  em {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    font-style: normal;\n    width: 3.5rem;\n    height: 3.5rem;\n    background-color: #ccc;\n    border-radius: 0 0.25rem 0.25rem 0;\n    text-shadow: 0px 0px 2px #fff;\n    font-size: 2.5rem;\n  }\n\n  .error input {\n    border-color: var(--color-danger);\n  }\n\n  .error em {\n    background-color: var(--color-danger);\n  }\n\n  .success input {\n    border-color: var(--color-success);\n  }\n\n  .success em {\n    background-color: var(--color-success);\n  }\n`);\n\n// <template>\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <label part=\"input\">\n    <strong></strong>\n    <div>\n      <input type=\"text\" />\n      <em></em>\n    </div>\n  </label>\n`;\n\n// <script>\nexport class NativeInput extends HTMLElement {\n  static get observedAttributes() {\n    return ['label', 'placeholder', 'validations'];\n  }\n\n  declare private _label?: string;\n  get label() { return this._label }\n  set label(value: undefined | string) { this.changeLabel(value, true) }\n\n  declare private _placeholder?: string;\n  get placeholder() { return this._placeholder }\n  set placeholder(value: undefined | string) { this.changePlaceholder(value, true) }\n\n  declare private _validations?: Validation[];\n  get validations() { return this._validations }\n  set validations(value: undefined | Validation[]) { this.changeValidations(value) }\n\n  private containerNode: null | HTMLLabelElement = null;\n  private labelNode: null | HTMLElement = null;\n  private inputNode: null | HTMLInputElement = null;\n  private messageNode: null | HTMLElement = null;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    if (this.shadowRoot) {\n      // set template/style\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n      this.shadowRoot.adoptedStyleSheets = [style];\n      // children refs\n      this.containerNode = this.shadowRoot.querySelector('label');\n      this.labelNode = this.shadowRoot.querySelector('strong');\n      this.inputNode = this.shadowRoot.querySelector('input');\n      this.messageNode = this.shadowRoot.querySelector('em');\n    }\n  }\n\n  private changeLabel(value?: string, reflect = false) {\n    this._label = value || 'Label';\n    if (reflect) {\n      this.setAttribute('label', this._label);\n    }\n    if (this.labelNode) {\n      this.labelNode.textContent = this._label;\n    }\n  }\n\n  private changePlaceholder(value?: string, reflect = false) {\n    this._placeholder = value as string;\n    if (reflect) {\n      this.setAttribute('placeholder', this._placeholder);\n    }\n    if (this.inputNode) {\n      this.inputNode.setAttribute('placeholder', this._placeholder);\n    }\n  }\n\n  private changeValidations(value?: string | Object) {\n    this._validations = typeof value === 'string' ? JSON.parse(value) : value;\n  }\n\n  connectedCallback() {\n    // initial attribute values\n    const initialLabel = this.getAttribute('label');\n    if (initialLabel && initialLabel !== this._label) {\n      this.changeLabel(initialLabel);\n    }\n    const initialPlaceholder = this.getAttribute('placeholder');\n    if (initialPlaceholder && initialPlaceholder !== this._placeholder) {\n      this.changePlaceholder(initialPlaceholder);\n    }\n    const initialValidations = this.getAttribute('validations');\n    if (initialValidations) {\n      this.changeValidations(initialValidations);\n    }\n    // events\n    if (this.inputNode) {\n      this.inputNode.addEventListener('input', this.onInputed);\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === 'label' && newValue !== this._label) {\n      this.changeLabel(newValue);\n    } else if (name === 'placeholder' && newValue !== this._placeholder) {\n      this.changePlaceholder(newValue);\n    } else if (name === 'validations') {\n      this.changeValidations(newValue);\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.inputNode) {\n      this.inputNode.removeEventListener('input', this.onInputed);\n    }\n  }\n\n  private onInputed = (e: Event) => {\n    if (!this.validations || !this.containerNode || !this.inputNode || !this.messageNode) return;\n    const value = (e?.target as HTMLInputElement)?.value;\n    // validate\n    let validationResult: undefined | Pick<Validation, 'type' | 'message'>;\n    for (let i = 0; i < this.validations.length; i++) {\n      const { equals, type, message } = this.validations[i];\n      const isMatched = value.toLowerCase() === equals.toLowerCase();\n      this.messageNode.textContent = !isMatched ? '' : message;\n      this.containerNode?.classList[!isMatched ? 'remove' : 'add'](type);\n      if (isMatched) {\n        validationResult = { type, message };\n        break;\n      }\n    }\n    // result\n    const detail = [{ value, ...validationResult }];\n    this.dispatchEvent(new CustomEvent('change', { detail }));\n  }\n\n}\n\ncustomElements.define('native-input', NativeInput);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'native-input': NativeInput;\n  }\n}\n"],"names":["$68bff44cd1c3e89d$var$style","CSSStyleSheet","replaceSync","$68bff44cd1c3e89d$var$template","document","createElement","innerHTML","$68bff44cd1c3e89d$export$7349d22023f097e4","HTMLElement","observedAttributes","label","_label","value","changeLabel","placeholder","_placeholder","changePlaceholder","validations","_validations","changeValidations","constructor","containerNode","labelNode","inputNode","messageNode","onInputed","e","validationResult","target","i","length","equals","type","message","isMatched","toLowerCase","textContent","classList","detail","dispatchEvent","CustomEvent","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","adoptedStyleSheets","querySelector","reflect","setAttribute","JSON","parse","connectedCallback","initialLabel","getAttribute","initialPlaceholder","initialValidations","addEventListener","attributeChangedCallback","name","oldValue","newValue","disconnectedCallback","removeEventListener","customElements","define"],"version":3,"file":"input.js.map"}