{"mappings":"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","sources":["<anon>","src/native/input.ts"],"sourcesContent":["(() => {\n// <style>\nconst $68bff44cd1c3e89d$var$style = new CSSStyleSheet();\n$68bff44cd1c3e89d$var$style.replaceSync(`\n  :host {\n    display: block;\n    container-type: inline-size;\n    position: relative;\n    width: 100%;\n  }\n  \n  label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  strong {\n    margin-bottom: 0.5rem;\n    font-size: 2rem;\n  }\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  input {\n    flex: 1;\n    outline: none;\n    box-sizing: border-box;\n    height: 3.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #fff;\n    border: 2px solid #ccc;\n    border-radius: 0.25rem 0 0 0.25rem;\n    font-size: 1.5rem;\n  }\n\n  em {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    font-style: normal;\n    width: 3.5rem;\n    height: 3.5rem;\n    background-color: #ccc;\n    border-radius: 0 0.25rem 0.25rem 0;\n    text-shadow: 0px 0px 2px #fff;\n    font-size: 2.5rem;\n  }\n\n  .error input {\n    border-color: var(--color-danger);\n  }\n\n  .error em {\n    background-color: var(--color-danger);\n  }\n\n  .success input {\n    border-color: var(--color-success);\n  }\n\n  .success em {\n    background-color: var(--color-success);\n  }\n`);\n// <template>\nconst $68bff44cd1c3e89d$var$template = document.createElement(\"template\");\n$68bff44cd1c3e89d$var$template.innerHTML = `\n  <label part=\"input\">\n    <strong></strong>\n    <div>\n      <input type=\"text\" />\n      <em></em>\n    </div>\n  </label>\n`;\nclass $68bff44cd1c3e89d$export$7349d22023f097e4 extends HTMLElement {\n    constructor(){\n        super();\n        this.rootNode = null;\n        this.labelNode = null;\n        this.inputNode = null;\n        this.messageNode = null;\n        this.label = \"Label\";\n        this.placeholder = null;\n        this.validations = null;\n        this.attachShadow({\n            mode: \"open\"\n        });\n        if (this.shadowRoot) {\n            // set template/style\n            this.shadowRoot.appendChild($68bff44cd1c3e89d$var$template.content.cloneNode(true));\n            this.shadowRoot.adoptedStyleSheets = [\n                $68bff44cd1c3e89d$var$style\n            ];\n            // access children\n            this.rootNode = this.shadowRoot.querySelector(\"label\");\n            this.labelNode = this.shadowRoot.querySelector(\"strong\");\n            this.inputNode = this.shadowRoot.querySelector(\"input\");\n            this.messageNode = this.shadowRoot.querySelector(\"em\");\n        }\n    }\n    static get observedAttributes() {\n        return [\n            \"label\",\n            \"placeholder\",\n            \"validations\"\n        ];\n    }\n    setLabel(attr) {\n        if (!attr || !this.labelNode) return;\n        this.label = attr;\n        this.labelNode.textContent = this.label;\n    }\n    setPlaceholder(attr) {\n        if (!attr || !this.inputNode) return;\n        this.placeholder = attr;\n        this.inputNode.setAttribute(\"placeholder\", this.placeholder);\n    }\n    setValidations(attr) {\n        if (!attr) return;\n        this.validations = typeof attr === \"string\" ? JSON.parse(attr) : attr;\n    }\n    connectedCallback() {\n        // initial props\n        this.setLabel(this.getAttribute(\"label\") || this.label);\n        this.setPlaceholder(this.getAttribute(\"placeholder\") || this.placeholder);\n        this.setValidations(this.getAttribute(\"validations\") || this.validations);\n        // events\n        if (this.inputNode) this.inputNode.addEventListener(\"input\", (e)=>this.onInput(e));\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"label\") this.setLabel(newValue);\n        if (name === \"placeholder\") this.setPlaceholder(newValue);\n        if (name === \"validations\") this.setValidations(newValue);\n    }\n    onInput(e) {\n        if (!this.validations || !this.rootNode || !this.inputNode || !this.messageNode) return;\n        const value = (e?.target)?.value;\n        // validate\n        let validationResult;\n        for(let i = 0; i < this.validations.length; i++){\n            const { equals: equals, type: type, message: message } = this.validations[i];\n            const isMatched = value.toLowerCase() === equals.toLowerCase();\n            this.messageNode.textContent = !isMatched ? \"\" : message;\n            this.rootNode?.classList[!isMatched ? \"remove\" : \"add\"](type);\n            if (isMatched) {\n                validationResult = {\n                    type: type,\n                    message: message\n                };\n                break;\n            }\n        }\n        // result\n        const detail = [\n            {\n                value: value,\n                ...validationResult\n            }\n        ];\n        this.dispatchEvent(new CustomEvent(\"change\", {\n            detail: detail\n        }));\n    }\n}\ncustomElements.define(\"native-input\", $68bff44cd1c3e89d$export$7349d22023f097e4);\n\n})();\n//# sourceMappingURL=input.js.map\n","import { Validation } from '../types';\n\n// <style>\nconst style = new CSSStyleSheet();\nstyle.replaceSync(`\n  :host {\n    display: block;\n    container-type: inline-size;\n    position: relative;\n    width: 100%;\n  }\n  \n  label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  strong {\n    margin-bottom: 0.5rem;\n    font-size: 2rem;\n  }\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  input {\n    flex: 1;\n    outline: none;\n    box-sizing: border-box;\n    height: 3.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #fff;\n    border: 2px solid #ccc;\n    border-radius: 0.25rem 0 0 0.25rem;\n    font-size: 1.5rem;\n  }\n\n  em {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    font-style: normal;\n    width: 3.5rem;\n    height: 3.5rem;\n    background-color: #ccc;\n    border-radius: 0 0.25rem 0.25rem 0;\n    text-shadow: 0px 0px 2px #fff;\n    font-size: 2.5rem;\n  }\n\n  .error input {\n    border-color: var(--color-danger);\n  }\n\n  .error em {\n    background-color: var(--color-danger);\n  }\n\n  .success input {\n    border-color: var(--color-success);\n  }\n\n  .success em {\n    background-color: var(--color-success);\n  }\n`);\n\n// <template>\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <label part=\"input\">\n    <strong></strong>\n    <div>\n      <input type=\"text\" />\n      <em></em>\n    </div>\n  </label>\n`;\n\n// <script>\nexport class NativeInput extends HTMLElement {\n  private rootNode: null | HTMLLabelElement = null;\n  private labelNode: null | HTMLElement = null;\n  private inputNode: null | HTMLInputElement = null;\n  private messageNode: null | HTMLElement = null;\n\n  private label: string = 'Label';\n  private placeholder: null | string = null;\n  private validations: null | Validation[] = null;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    if (this.shadowRoot) {\n      // set template/style\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n      this.shadowRoot.adoptedStyleSheets = [style];\n      // access children\n      this.rootNode = this.shadowRoot.querySelector('label');\n      this.labelNode = this.shadowRoot.querySelector('strong');\n      this.inputNode = this.shadowRoot.querySelector('input');\n      this.messageNode = this.shadowRoot.querySelector('em');\n    }\n  }\n\n  static get observedAttributes() {\n    return ['label', 'placeholder', 'validations'];\n  }\n\n  private setLabel(attr: null | string) {\n    if (!attr || !this.labelNode) return;\n    this.label = attr;\n    this.labelNode.textContent = this.label;\n  }\n\n  private setPlaceholder(attr: null | string) {\n    if (!attr || !this.inputNode) return;\n    this.placeholder = attr;\n    this.inputNode.setAttribute('placeholder', this.placeholder);\n  }\n\n  private setValidations(attr: null | string | Object) {\n    if (!attr) return;\n    this.validations = typeof attr === 'string' ? JSON.parse(attr) : attr;\n  }\n\n  connectedCallback() {\n    // initial props\n    this.setLabel(this.getAttribute('label') || this.label);\n    this.setPlaceholder(this.getAttribute('placeholder') || this.placeholder);\n    this.setValidations(this.getAttribute('validations') || this.validations);\n    // events\n    if (this.inputNode) {\n      this.inputNode.addEventListener('input', e => this.onInput(e));\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === 'label') this.setLabel(newValue);\n    if (name === 'placeholder') this.setPlaceholder(newValue);\n    if (name === 'validations') this.setValidations(newValue);\n  }\n\n  private onInput(e: Event) {\n    if (!this.validations || !this.rootNode || !this.inputNode || !this.messageNode) return;\n    const value = (e?.target as HTMLInputElement)?.value;\n    // validate\n    let validationResult: undefined | Pick<Validation, 'type' | 'message'>;\n    for (let i = 0; i < this.validations.length; i++) {\n      const { equals, type, message } = this.validations[i];\n      const isMatched = value.toLowerCase() === equals.toLowerCase();\n      this.messageNode.textContent = !isMatched ? '' : message;\n      this.rootNode?.classList[!isMatched ? 'remove' : 'add'](type);\n      if (isMatched) {\n        validationResult = { type, message };\n        break;\n      }\n    }\n    // result\n    const detail = [{ value, ...validationResult }];\n    this.dispatchEvent(new CustomEvent('change', { detail }));\n  }\n\n}\n\ncustomElements.define('native-input', NativeInput);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'native-input': NativeInput;\n  }\n}\n"],"names":["$68bff44cd1c3e89d$var$style","CSSStyleSheet","replaceSync","$68bff44cd1c3e89d$var$template","document","createElement","innerHTML","$68bff44cd1c3e89d$export$7349d22023f097e4","HTMLElement","constructor","rootNode","labelNode","inputNode","messageNode","label","placeholder","validations","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","adoptedStyleSheets","querySelector","observedAttributes","setLabel","attr","textContent","setPlaceholder","setAttribute","setValidations","JSON","parse","connectedCallback","getAttribute","addEventListener","e","onInput","attributeChangedCallback","name","oldValue","newValue","validationResult","value","target","i","length","equals","type","message","isMatched","toLowerCase","classList","detail","dispatchEvent","CustomEvent","customElements","define"],"version":3,"file":"input.js.map"}