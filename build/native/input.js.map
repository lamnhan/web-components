{
  "version": 3,
  "sources": ["../../src/native/input.ts"],
  "sourcesContent": ["import { Validation } from '../types';\n\n// <style>\nconst style = new CSSStyleSheet();\nstyle.replaceSync(`\n  :host {\n    display: block;\n    container-type: inline-size;\n    position: relative;\n    width: 100%;\n  }\n  \n  label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  strong {\n    margin-bottom: 0.5rem;\n    font-size: 2rem;\n  }\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  input {\n    flex: 1;\n    outline: none;\n    box-sizing: border-box;\n    height: 3.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #fff;\n    border: 2px solid #ccc;\n    border-radius: 0.25rem 0 0 0.25rem;\n    font-size: 1.5rem;\n  }\n\n  em {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    font-style: normal;\n    width: 3.5rem;\n    height: 3.5rem;\n    background-color: #ccc;\n    border-radius: 0 0.25rem 0.25rem 0;\n    text-shadow: 0px 0px 2px #fff;\n    font-size: 2.5rem;\n  }\n\n  .error input {\n    border-color: var(--color-danger);\n  }\n\n  .error em {\n    background-color: var(--color-danger);\n  }\n\n  .success input {\n    border-color: var(--color-success);\n  }\n\n  .success em {\n    background-color: var(--color-success);\n  }\n`);\n\n// <template>\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <label part=\"input\">\n    <strong></strong>\n    <div>\n      <input type=\"text\" />\n      <em></em>\n    </div>\n  </label>\n`;\n\n// <script>\nexport class NativeInput extends HTMLElement {\n  static get observedAttributes() {\n    return ['label', 'placeholder', 'validations'];\n  }\n\n  declare private _label?: string;\n  get label() { return this._label }\n  set label(value: undefined | string) { this.changeLabel(value, true) }\n\n  declare private _placeholder?: string;\n  get placeholder() { return this._placeholder }\n  set placeholder(value: undefined | string) { this.changePlaceholder(value, true) }\n\n  declare private _validations?: Validation[];\n  get validations() { return this._validations }\n  set validations(value: undefined | Validation[]) { this.changeValidations(value) }\n\n  private containerNode: null | HTMLLabelElement = null;\n  private labelNode: null | HTMLElement = null;\n  private inputNode: null | HTMLInputElement = null;\n  private messageNode: null | HTMLElement = null;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    if (this.shadowRoot) {\n      // set template/style\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n      this.shadowRoot.adoptedStyleSheets = [style];\n      // children refs\n      this.containerNode = this.shadowRoot.querySelector('label');\n      this.labelNode = this.shadowRoot.querySelector('strong');\n      this.inputNode = this.shadowRoot.querySelector('input');\n      this.messageNode = this.shadowRoot.querySelector('em');\n    }\n  }\n\n  private changeLabel(value?: string, reflect = false) {\n    this._label = value || 'Label';\n    if (reflect) {\n      this.setAttribute('label', this._label);\n    }\n    if (this.labelNode) {\n      this.labelNode.textContent = this._label;\n    }\n  }\n\n  private changePlaceholder(value?: string, reflect = false) {\n    this._placeholder = value as string;\n    if (reflect) {\n      this.setAttribute('placeholder', this._placeholder);\n    }\n    if (this.inputNode) {\n      this.inputNode.setAttribute('placeholder', this._placeholder);\n    }\n  }\n\n  private changeValidations(value?: string | Object) {\n    this._validations = typeof value === 'string' ? JSON.parse(value) : value;\n  }\n\n  connectedCallback() {\n    // initial attribute values\n    const initialLabel = this.getAttribute('label');\n    if (initialLabel && initialLabel !== this._label) {\n      this.changeLabel(initialLabel);\n    }\n    const initialPlaceholder = this.getAttribute('placeholder');\n    if (initialPlaceholder && initialPlaceholder !== this._placeholder) {\n      this.changePlaceholder(initialPlaceholder);\n    }\n    const initialValidations = this.getAttribute('validations');\n    if (initialValidations) {\n      this.changeValidations(initialValidations);\n    }\n    // events\n    if (this.inputNode) {\n      this.inputNode.addEventListener('input', this.onInputed);\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === 'label' && newValue !== this._label) {\n      this.changeLabel(newValue);\n    } else if (name === 'placeholder' && newValue !== this._placeholder) {\n      this.changePlaceholder(newValue);\n    } else if (name === 'validations') {\n      this.changeValidations(newValue);\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.inputNode) {\n      this.inputNode.removeEventListener('input', this.onInputed);\n    }\n  }\n\n  private onInputed = (e: Event) => {\n    if (!this.validations || !this.containerNode || !this.inputNode || !this.messageNode) return;\n    const value = (e?.target as HTMLInputElement)?.value;\n    // validate\n    let validationResult: undefined | Pick<Validation, 'type' | 'message'>;\n    for (let i = 0; i < this.validations.length; i++) {\n      const { equals, type, message } = this.validations[i];\n      const isMatched = value.toLowerCase() === equals.toLowerCase();\n      this.messageNode.textContent = !isMatched ? '' : message;\n      this.containerNode?.classList[!isMatched ? 'remove' : 'add'](type);\n      if (isMatched) {\n        validationResult = { type, message };\n        break;\n      }\n    }\n    // result\n    const detail = [{ value, ...validationResult }];\n    this.dispatchEvent(new CustomEvent('change', { detail }));\n  }\n\n}\n\ncustomElements.define('native-input', NativeInput);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'native-input': NativeInput;\n  }\n}\n"],
  "mappings": "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",
  "names": ["style", "template", "NativeInput", "value", "validationResult", "i", "equals", "type", "message", "isMatched", "detail", "reflect", "initialLabel", "initialPlaceholder", "initialValidations", "name", "oldValue", "newValue"]
}
